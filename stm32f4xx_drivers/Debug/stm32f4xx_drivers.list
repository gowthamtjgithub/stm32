
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000850  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080009f8  080009f8  000109f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a04  08000a04  00010a0c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a04  08000a04  00010a0c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a04  08000a0c  00010a0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a04  08000a04  00010a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a08  08000a08  00010a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010a0c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010a0c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002a6b  00000000  00000000  00010a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000069f  00000000  00000000  000134a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000110  00000000  00000000  00013b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000d8  00000000  00000000  00013c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000290b  00000000  00000000  00013d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001999  00000000  00000000  0001663b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009c96  00000000  00000000  00017fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00021c6a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000364  00000000  00000000  00021cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080009e0 	.word	0x080009e0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080009e0 	.word	0x080009e0

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <SPI2_GPIOInits>:
#include "string.h"
#include "stm32f4xx.h"
#include "stm32f407xx_gpio_driver.h"

void SPI2_GPIOInits(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80001fe:	4b18      	ldr	r3, [pc, #96]	; (8000260 <SPI2_GPIOInits+0x68>)
 8000200:	603b      	str	r3, [r7, #0]
	SPIPins.pGPIO_PinConfig->GPIO_PinMode = GPIO_MODE_ALTFN;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2202      	movs	r2, #2
 8000206:	705a      	strb	r2, [r3, #1]
	SPIPins.pGPIO_PinConfig->GPIO_PinAltFunMode = 5;
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2205      	movs	r2, #5
 800020c:	715a      	strb	r2, [r3, #5]
	SPIPins.pGPIO_PinConfig->GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2200      	movs	r2, #0
 8000212:	711a      	strb	r2, [r3, #4]
	SPIPins.pGPIO_PinConfig->GPIO_PinPupdControl = GPIO_NO_PUPD ;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	2200      	movs	r2, #0
 8000218:	70da      	strb	r2, [r3, #3]
	SPIPins.pGPIO_PinConfig->GPIO_PinSpeed = GPIO_SPEED_FAST;
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	2202      	movs	r2, #2
 800021e:	709a      	strb	r2, [r3, #2]

	//SCLK
	SPIPins.pGPIO_PinConfig->GPIO_PinNumber = GPIO_PIN_13;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	220d      	movs	r2, #13
 8000224:	701a      	strb	r2, [r3, #0]
	GPIO_Init(&SPIPins);
 8000226:	463b      	mov	r3, r7
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f90b 	bl	8000444 <GPIO_Init>

	//MOSI
	SPIPins.pGPIO_PinConfig->GPIO_PinNumber = GPIO_PIN_15;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	220f      	movs	r2, #15
 8000232:	701a      	strb	r2, [r3, #0]
	GPIO_Init(&SPIPins);
 8000234:	463b      	mov	r3, r7
 8000236:	4618      	mov	r0, r3
 8000238:	f000 f904 	bl	8000444 <GPIO_Init>

	//MISO
	SPIPins.pGPIO_PinConfig->GPIO_PinNumber = GPIO_PIN_14;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	220e      	movs	r2, #14
 8000240:	701a      	strb	r2, [r3, #0]
	GPIO_Init(&SPIPins);
 8000242:	463b      	mov	r3, r7
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f8fd 	bl	8000444 <GPIO_Init>

	//NSS
	SPIPins.pGPIO_PinConfig->GPIO_PinNumber = GPIO_PIN_12;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	220c      	movs	r2, #12
 800024e:	701a      	strb	r2, [r3, #0]
		GPIO_Init(&SPIPins);
 8000250:	463b      	mov	r3, r7
 8000252:	4618      	mov	r0, r3
 8000254:	f000 f8f6 	bl	8000444 <GPIO_Init>


}
 8000258:	bf00      	nop
 800025a:	3708      	adds	r7, #8
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	40020400 	.word	0x40020400

08000264 <SPI2_Inits>:


void SPI2_Inits(void){
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 800026a:	4b0c      	ldr	r3, [pc, #48]	; (800029c <SPI2_Inits+0x38>)
 800026c:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800026e:	2301      	movs	r3, #1
 8000270:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000272:	2301      	movs	r3, #1
 8000274:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;
 8000276:	2300      	movs	r3, #0
 8000278:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800027a:	2300      	movs	r3, #0
 800027c:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800027e:	2300      	movs	r3, #0
 8000280:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000282:	2300      	movs	r3, #0
 8000284:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN;//software slave management enabled for NSS pin
 8000286:	2301      	movs	r3, #1
 8000288:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f000 facf 	bl	8000830 <SPI_Init>

}
 8000292:	bf00      	nop
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40003800 	.word	0x40003800

080002a0 <main>:

int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
	char user_data[] = "Hello world";
 80002a6:	4a0c      	ldr	r2, [pc, #48]	; (80002d8 <main+0x38>)
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 80002b0:	f7ff ffa2 	bl	80001f8 <SPI2_GPIOInits>

	//This function is used to initialize the 	SPI2 peripheral parameters
	SPI2_Inits();
 80002b4:	f7ff ffd6 	bl	8000264 <SPI2_Inits>

	//enable the spi2 peripheral
	SPI_PeripheralControl(SPI2,ENABLE);
 80002b8:	2101      	movs	r1, #1
 80002ba:	4808      	ldr	r0, [pc, #32]	; (80002dc <main+0x3c>)
 80002bc:	f000 fb50 	bl	8000960 <SPI_PeripheralControl>

	SPI_SendData(SPI2,(uint8_t*)user_data ,strlen(user_data));
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	4618      	mov	r0, r3
 80002c4:	f7ff ff90 	bl	80001e8 <strlen>
 80002c8:	4602      	mov	r2, r0
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4619      	mov	r1, r3
 80002ce:	4803      	ldr	r0, [pc, #12]	; (80002dc <main+0x3c>)
 80002d0:	f000 fb12 	bl	80008f8 <SPI_SendData>

	while(1){};
 80002d4:	e7fe      	b.n	80002d4 <main+0x34>
 80002d6:	bf00      	nop
 80002d8:	080009f8 	.word	0x080009f8
 80002dc:	40003800 	.word	0x40003800

080002e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e0:	480d      	ldr	r0, [pc, #52]	; (8000318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e8:	480c      	ldr	r0, [pc, #48]	; (800031c <LoopForever+0x6>)
  ldr r1, =_edata
 80002ea:	490d      	ldr	r1, [pc, #52]	; (8000320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ec:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <LoopForever+0xe>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f0:	e002      	b.n	80002f8 <LoopCopyDataInit>

080002f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f6:	3304      	adds	r3, #4

080002f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002fc:	d3f9      	bcc.n	80002f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fe:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000300:	4c0a      	ldr	r4, [pc, #40]	; (800032c <LoopForever+0x16>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000304:	e001      	b.n	800030a <LoopFillZerobss>

08000306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000308:	3204      	adds	r2, #4

0800030a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800030c:	d3fb      	bcc.n	8000306 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030e:	f000 fb43 	bl	8000998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000312:	f7ff ffc5 	bl	80002a0 <main>

08000316 <LoopForever>:

LoopForever:
    b LoopForever
 8000316:	e7fe      	b.n	8000316 <LoopForever>
  ldr   r0, =_estack
 8000318:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800031c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000320:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000324:	08000a0c 	.word	0x08000a0c
  ldr r2, =_sbss
 8000328:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800032c:	2000001c 	.word	0x2000001c

08000330 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000330:	e7fe      	b.n	8000330 <ADC_IRQHandler>
	...

08000334 <GPIO_PeriClockControl>:
 * @return			- none
 *
 * @Note			- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000340:	78fb      	ldrb	r3, [r7, #3]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d136      	bne.n	80003b4 <GPIO_PeriClockControl+0x80>
	{
		if(pGPIOx == GPIOA)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4a38      	ldr	r2, [pc, #224]	; (800042c <GPIO_PeriClockControl+0xf8>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d106      	bne.n	800035c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800034e:	4b38      	ldr	r3, [pc, #224]	; (8000430 <GPIO_PeriClockControl+0xfc>)
 8000350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000352:	4a37      	ldr	r2, [pc, #220]	; (8000430 <GPIO_PeriClockControl+0xfc>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOE)
		{
			GPIOE_PCLK_DI();
		}
	}
}
 800035a:	e061      	b.n	8000420 <GPIO_PeriClockControl+0xec>
		else if(pGPIOx == GPIOB)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a35      	ldr	r2, [pc, #212]	; (8000434 <GPIO_PeriClockControl+0x100>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d106      	bne.n	8000372 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000364:	4b32      	ldr	r3, [pc, #200]	; (8000430 <GPIO_PeriClockControl+0xfc>)
 8000366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000368:	4a31      	ldr	r2, [pc, #196]	; (8000430 <GPIO_PeriClockControl+0xfc>)
 800036a:	f043 0302 	orr.w	r3, r3, #2
 800036e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000370:	e056      	b.n	8000420 <GPIO_PeriClockControl+0xec>
		else if(pGPIOx == GPIOC)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4a30      	ldr	r2, [pc, #192]	; (8000438 <GPIO_PeriClockControl+0x104>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d106      	bne.n	8000388 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800037a:	4b2d      	ldr	r3, [pc, #180]	; (8000430 <GPIO_PeriClockControl+0xfc>)
 800037c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037e:	4a2c      	ldr	r2, [pc, #176]	; (8000430 <GPIO_PeriClockControl+0xfc>)
 8000380:	f043 0304 	orr.w	r3, r3, #4
 8000384:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000386:	e04b      	b.n	8000420 <GPIO_PeriClockControl+0xec>
		else if(pGPIOx == GPIOD)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a2c      	ldr	r2, [pc, #176]	; (800043c <GPIO_PeriClockControl+0x108>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d106      	bne.n	800039e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000390:	4b27      	ldr	r3, [pc, #156]	; (8000430 <GPIO_PeriClockControl+0xfc>)
 8000392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000394:	4a26      	ldr	r2, [pc, #152]	; (8000430 <GPIO_PeriClockControl+0xfc>)
 8000396:	f043 0308 	orr.w	r3, r3, #8
 800039a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800039c:	e040      	b.n	8000420 <GPIO_PeriClockControl+0xec>
		else if(pGPIOx == GPIOE)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a27      	ldr	r2, [pc, #156]	; (8000440 <GPIO_PeriClockControl+0x10c>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d13c      	bne.n	8000420 <GPIO_PeriClockControl+0xec>
			GPIOE_PCLK_EN();
 80003a6:	4b22      	ldr	r3, [pc, #136]	; (8000430 <GPIO_PeriClockControl+0xfc>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003aa:	4a21      	ldr	r2, [pc, #132]	; (8000430 <GPIO_PeriClockControl+0xfc>)
 80003ac:	f043 0310 	orr.w	r3, r3, #16
 80003b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b2:	e035      	b.n	8000420 <GPIO_PeriClockControl+0xec>
		if(pGPIOx == GPIOA)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a1d      	ldr	r2, [pc, #116]	; (800042c <GPIO_PeriClockControl+0xf8>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d106      	bne.n	80003ca <GPIO_PeriClockControl+0x96>
			GPIOA_PCLK_DI();
 80003bc:	4b1c      	ldr	r3, [pc, #112]	; (8000430 <GPIO_PeriClockControl+0xfc>)
 80003be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c0:	4a1b      	ldr	r2, [pc, #108]	; (8000430 <GPIO_PeriClockControl+0xfc>)
 80003c2:	f023 0301 	bic.w	r3, r3, #1
 80003c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c8:	e02a      	b.n	8000420 <GPIO_PeriClockControl+0xec>
		else if(pGPIOx == GPIOB)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a19      	ldr	r2, [pc, #100]	; (8000434 <GPIO_PeriClockControl+0x100>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d106      	bne.n	80003e0 <GPIO_PeriClockControl+0xac>
			GPIOB_PCLK_DI();
 80003d2:	4b17      	ldr	r3, [pc, #92]	; (8000430 <GPIO_PeriClockControl+0xfc>)
 80003d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d6:	4a16      	ldr	r2, [pc, #88]	; (8000430 <GPIO_PeriClockControl+0xfc>)
 80003d8:	f023 0302 	bic.w	r3, r3, #2
 80003dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003de:	e01f      	b.n	8000420 <GPIO_PeriClockControl+0xec>
		else if(pGPIOx == GPIOC)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a15      	ldr	r2, [pc, #84]	; (8000438 <GPIO_PeriClockControl+0x104>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d106      	bne.n	80003f6 <GPIO_PeriClockControl+0xc2>
			GPIOC_PCLK_DI();
 80003e8:	4b11      	ldr	r3, [pc, #68]	; (8000430 <GPIO_PeriClockControl+0xfc>)
 80003ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ec:	4a10      	ldr	r2, [pc, #64]	; (8000430 <GPIO_PeriClockControl+0xfc>)
 80003ee:	f023 0304 	bic.w	r3, r3, #4
 80003f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f4:	e014      	b.n	8000420 <GPIO_PeriClockControl+0xec>
		else if(pGPIOx == GPIOD)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a10      	ldr	r2, [pc, #64]	; (800043c <GPIO_PeriClockControl+0x108>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d106      	bne.n	800040c <GPIO_PeriClockControl+0xd8>
			GPIOD_PCLK_DI();
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <GPIO_PeriClockControl+0xfc>)
 8000400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000402:	4a0b      	ldr	r2, [pc, #44]	; (8000430 <GPIO_PeriClockControl+0xfc>)
 8000404:	f023 0308 	bic.w	r3, r3, #8
 8000408:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040a:	e009      	b.n	8000420 <GPIO_PeriClockControl+0xec>
		else if(pGPIOx == GPIOE)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a0c      	ldr	r2, [pc, #48]	; (8000440 <GPIO_PeriClockControl+0x10c>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d105      	bne.n	8000420 <GPIO_PeriClockControl+0xec>
			GPIOE_PCLK_DI();
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <GPIO_PeriClockControl+0xfc>)
 8000416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000418:	4a05      	ldr	r2, [pc, #20]	; (8000430 <GPIO_PeriClockControl+0xfc>)
 800041a:	f023 0310 	bic.w	r3, r3, #16
 800041e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	40020000 	.word	0x40020000
 8000430:	40023800 	.word	0x40023800
 8000434:	40020400 	.word	0x40020400
 8000438:	40020800 	.word	0x40020800
 800043c:	40020c00 	.word	0x40020c00
 8000440:	40021000 	.word	0x40021000

08000444 <GPIO_Init>:
 *
 * @Note			- none
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]

		uint32_t temp = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]

		//enable the peripheral clock
		GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2101      	movs	r1, #1
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff ff6c 	bl	8000334 <GPIO_PeriClockControl>

		//1.configure the mode of gpio pin
		if(pGPIOHandle->pGPIO_PinConfig->GPIO_PinMode <= GPIO_MODE_ANALOG)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	785b      	ldrb	r3, [r3, #1]
 8000462:	2b03      	cmp	r3, #3
 8000464:	d822      	bhi.n	80004ac <GPIO_Init+0x68>
		{
			//the non-interrupt mode
			temp = (pGPIOHandle->pGPIO_PinConfig->GPIO_PinMode << (2 * pGPIOHandle->pGPIO_PinConfig->GPIO_PinNumber));
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	785b      	ldrb	r3, [r3, #1]
 800046c:	461a      	mov	r2, r3
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	fa02 f303 	lsl.w	r3, r2, r3
 800047a:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->pGPIO_PinConfig->GPIO_PinNumber);//clearing
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	4619      	mov	r1, r3
 800048a:	2303      	movs	r3, #3
 800048c:	408b      	lsls	r3, r1
 800048e:	43db      	mvns	r3, r3
 8000490:	4619      	mov	r1, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	400a      	ands	r2, r1
 8000498:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->MODER |= temp;//setting
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	6819      	ldr	r1, [r3, #0]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	697a      	ldr	r2, [r7, #20]
 80004a6:	430a      	orrs	r2, r1
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	e0b3      	b.n	8000614 <GPIO_Init+0x1d0>
		}
		else
		{
			//this part will code later. (interrupt mode)

			if((pGPIOHandle->pGPIO_PinConfig->GPIO_PinMode) == GPIO_MODE_IT_FT)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	785b      	ldrb	r3, [r3, #1]
 80004b2:	2b04      	cmp	r3, #4
 80004b4:	d119      	bne.n	80004ea <GPIO_Init+0xa6>
			{
				//configure the FTSR
				EXTI->FTSR |= (1<< pGPIOHandle->pGPIO_PinConfig->GPIO_PinNumber);
 80004b6:	4b42      	ldr	r3, [pc, #264]	; (80005c0 <GPIO_Init+0x17c>)
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	687a      	ldr	r2, [r7, #4]
 80004bc:	6852      	ldr	r2, [r2, #4]
 80004be:	7812      	ldrb	r2, [r2, #0]
 80004c0:	4611      	mov	r1, r2
 80004c2:	2201      	movs	r2, #1
 80004c4:	408a      	lsls	r2, r1
 80004c6:	4611      	mov	r1, r2
 80004c8:	4a3d      	ldr	r2, [pc, #244]	; (80005c0 <GPIO_Init+0x17c>)
 80004ca:	430b      	orrs	r3, r1
 80004cc:	60d3      	str	r3, [r2, #12]
				//Clear the corresponding RTSR bit
				EXTI->RTSR &= ~(1<< pGPIOHandle->pGPIO_PinConfig->GPIO_PinNumber);
 80004ce:	4b3c      	ldr	r3, [pc, #240]	; (80005c0 <GPIO_Init+0x17c>)
 80004d0:	689b      	ldr	r3, [r3, #8]
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	6852      	ldr	r2, [r2, #4]
 80004d6:	7812      	ldrb	r2, [r2, #0]
 80004d8:	4611      	mov	r1, r2
 80004da:	2201      	movs	r2, #1
 80004dc:	408a      	lsls	r2, r1
 80004de:	43d2      	mvns	r2, r2
 80004e0:	4611      	mov	r1, r2
 80004e2:	4a37      	ldr	r2, [pc, #220]	; (80005c0 <GPIO_Init+0x17c>)
 80004e4:	400b      	ands	r3, r1
 80004e6:	6093      	str	r3, [r2, #8]
 80004e8:	e03b      	b.n	8000562 <GPIO_Init+0x11e>
			}
			else if(pGPIOHandle->pGPIO_PinConfig->GPIO_PinMode == GPIO_MODE_IT_RT)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	785b      	ldrb	r3, [r3, #1]
 80004f0:	2b05      	cmp	r3, #5
 80004f2:	d119      	bne.n	8000528 <GPIO_Init+0xe4>
			{
				//configure the RTSR
				EXTI->RTSR |= (1<< pGPIOHandle->pGPIO_PinConfig->GPIO_PinNumber);
 80004f4:	4b32      	ldr	r3, [pc, #200]	; (80005c0 <GPIO_Init+0x17c>)
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	6852      	ldr	r2, [r2, #4]
 80004fc:	7812      	ldrb	r2, [r2, #0]
 80004fe:	4611      	mov	r1, r2
 8000500:	2201      	movs	r2, #1
 8000502:	408a      	lsls	r2, r1
 8000504:	4611      	mov	r1, r2
 8000506:	4a2e      	ldr	r2, [pc, #184]	; (80005c0 <GPIO_Init+0x17c>)
 8000508:	430b      	orrs	r3, r1
 800050a:	6093      	str	r3, [r2, #8]
				//Clear the corresponding FTSR bit
				EXTI->FTSR &= ~(1<< pGPIOHandle->pGPIO_PinConfig->GPIO_PinNumber);
 800050c:	4b2c      	ldr	r3, [pc, #176]	; (80005c0 <GPIO_Init+0x17c>)
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	6852      	ldr	r2, [r2, #4]
 8000514:	7812      	ldrb	r2, [r2, #0]
 8000516:	4611      	mov	r1, r2
 8000518:	2201      	movs	r2, #1
 800051a:	408a      	lsls	r2, r1
 800051c:	43d2      	mvns	r2, r2
 800051e:	4611      	mov	r1, r2
 8000520:	4a27      	ldr	r2, [pc, #156]	; (80005c0 <GPIO_Init+0x17c>)
 8000522:	400b      	ands	r3, r1
 8000524:	60d3      	str	r3, [r2, #12]
 8000526:	e01c      	b.n	8000562 <GPIO_Init+0x11e>
			}
			else if(pGPIOHandle->pGPIO_PinConfig->GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	785b      	ldrb	r3, [r3, #1]
 800052e:	2b06      	cmp	r3, #6
 8000530:	d117      	bne.n	8000562 <GPIO_Init+0x11e>
			{
				//configure both FTSR and RTSR
				EXTI->FTSR |= (1<< pGPIOHandle->pGPIO_PinConfig->GPIO_PinNumber);
 8000532:	4b23      	ldr	r3, [pc, #140]	; (80005c0 <GPIO_Init+0x17c>)
 8000534:	68db      	ldr	r3, [r3, #12]
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	6852      	ldr	r2, [r2, #4]
 800053a:	7812      	ldrb	r2, [r2, #0]
 800053c:	4611      	mov	r1, r2
 800053e:	2201      	movs	r2, #1
 8000540:	408a      	lsls	r2, r1
 8000542:	4611      	mov	r1, r2
 8000544:	4a1e      	ldr	r2, [pc, #120]	; (80005c0 <GPIO_Init+0x17c>)
 8000546:	430b      	orrs	r3, r1
 8000548:	60d3      	str	r3, [r2, #12]
				EXTI->RTSR |= (1<< pGPIOHandle->pGPIO_PinConfig->GPIO_PinNumber);
 800054a:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <GPIO_Init+0x17c>)
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	6852      	ldr	r2, [r2, #4]
 8000552:	7812      	ldrb	r2, [r2, #0]
 8000554:	4611      	mov	r1, r2
 8000556:	2201      	movs	r2, #1
 8000558:	408a      	lsls	r2, r1
 800055a:	4611      	mov	r1, r2
 800055c:	4a18      	ldr	r2, [pc, #96]	; (80005c0 <GPIO_Init+0x17c>)
 800055e:	430b      	orrs	r3, r1
 8000560:	6093      	str	r3, [r2, #8]

			}

			//2. configure the GPIO port selection in SYSCFG_EXTICR
			uint8_t temp1 = pGPIOHandle->pGPIO_PinConfig->GPIO_PinNumber / 4;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	089b      	lsrs	r3, r3, #2
 800056a:	74fb      	strb	r3, [r7, #19]
			uint8_t temp2 = pGPIOHandle->pGPIO_PinConfig->GPIO_PinNumber % 4;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	f003 0303 	and.w	r3, r3, #3
 8000576:	74bb      	strb	r3, [r7, #18]
			uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a11      	ldr	r2, [pc, #68]	; (80005c4 <GPIO_Init+0x180>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d02a      	beq.n	80005d8 <GPIO_Init+0x194>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a10      	ldr	r2, [pc, #64]	; (80005c8 <GPIO_Init+0x184>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d016      	beq.n	80005ba <GPIO_Init+0x176>
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <GPIO_Init+0x188>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d00f      	beq.n	80005b6 <GPIO_Init+0x172>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <GPIO_Init+0x18c>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d008      	beq.n	80005b2 <GPIO_Init+0x16e>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0b      	ldr	r2, [pc, #44]	; (80005d4 <GPIO_Init+0x190>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d101      	bne.n	80005ae <GPIO_Init+0x16a>
 80005aa:	2304      	movs	r3, #4
 80005ac:	e015      	b.n	80005da <GPIO_Init+0x196>
 80005ae:	2300      	movs	r3, #0
 80005b0:	e013      	b.n	80005da <GPIO_Init+0x196>
 80005b2:	2303      	movs	r3, #3
 80005b4:	e011      	b.n	80005da <GPIO_Init+0x196>
 80005b6:	2302      	movs	r3, #2
 80005b8:	e00f      	b.n	80005da <GPIO_Init+0x196>
 80005ba:	2301      	movs	r3, #1
 80005bc:	e00d      	b.n	80005da <GPIO_Init+0x196>
 80005be:	bf00      	nop
 80005c0:	40013c00 	.word	0x40013c00
 80005c4:	40020000 	.word	0x40020000
 80005c8:	40020400 	.word	0x40020400
 80005cc:	40020800 	.word	0x40020800
 80005d0:	40020c00 	.word	0x40020c00
 80005d4:	40021000 	.word	0x40021000
 80005d8:	2300      	movs	r3, #0
 80005da:	747b      	strb	r3, [r7, #17]
			SYSCFG_PCLK_EN();
 80005dc:	4b65      	ldr	r3, [pc, #404]	; (8000774 <GPIO_Init+0x330>)
 80005de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e0:	4a64      	ldr	r2, [pc, #400]	; (8000774 <GPIO_Init+0x330>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e6:	6453      	str	r3, [r2, #68]	; 0x44
			SYSCFG->EXTICR[temp1] = portCode << (temp2 * 4);
 80005e8:	7c7a      	ldrb	r2, [r7, #17]
 80005ea:	7cbb      	ldrb	r3, [r7, #18]
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	fa02 f103 	lsl.w	r1, r2, r3
 80005f2:	4a61      	ldr	r2, [pc, #388]	; (8000778 <GPIO_Init+0x334>)
 80005f4:	7cfb      	ldrb	r3, [r7, #19]
 80005f6:	3302      	adds	r3, #2
 80005f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			//3. enable the exti interrupt delivery using IMR
			EXTI->IMR |= (1<< pGPIOHandle->pGPIO_PinConfig->GPIO_PinNumber);
 80005fc:	4b5f      	ldr	r3, [pc, #380]	; (800077c <GPIO_Init+0x338>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	6852      	ldr	r2, [r2, #4]
 8000604:	7812      	ldrb	r2, [r2, #0]
 8000606:	4611      	mov	r1, r2
 8000608:	2201      	movs	r2, #1
 800060a:	408a      	lsls	r2, r1
 800060c:	4611      	mov	r1, r2
 800060e:	4a5b      	ldr	r2, [pc, #364]	; (800077c <GPIO_Init+0x338>)
 8000610:	430b      	orrs	r3, r1
 8000612:	6013      	str	r3, [r2, #0]

		}

		temp = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]

		//2. configure the speed
		temp = (pGPIOHandle->pGPIO_PinConfig->GPIO_PinSpeed << (2 * pGPIOHandle->pGPIO_PinConfig->GPIO_PinNumber));
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	789b      	ldrb	r3, [r3, #2]
 800061e:	461a      	mov	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	fa02 f303 	lsl.w	r3, r2, r3
 800062c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->pGPIO_PinConfig->GPIO_PinNumber);//clearing
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	689a      	ldr	r2, [r3, #8]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	4619      	mov	r1, r3
 800063c:	2303      	movs	r3, #3
 800063e:	408b      	lsls	r3, r1
 8000640:	43db      	mvns	r3, r3
 8000642:	4619      	mov	r1, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	400a      	ands	r2, r1
 800064a:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp;//setting
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	6899      	ldr	r1, [r3, #8]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	697a      	ldr	r2, [r7, #20]
 8000658:	430a      	orrs	r2, r1
 800065a:	609a      	str	r2, [r3, #8]

		temp = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]

		//3. configure the pupd settings
		temp = (pGPIOHandle->pGPIO_PinConfig->GPIO_PinPupdControl << (2 * pGPIOHandle->pGPIO_PinConfig->GPIO_PinNumber));
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	78db      	ldrb	r3, [r3, #3]
 8000666:	461a      	mov	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	fa02 f303 	lsl.w	r3, r2, r3
 8000674:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->pGPIO_PinConfig->GPIO_PinNumber);//clearing
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	68da      	ldr	r2, [r3, #12]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	4619      	mov	r1, r3
 8000684:	2303      	movs	r3, #3
 8000686:	408b      	lsls	r3, r1
 8000688:	43db      	mvns	r3, r3
 800068a:	4619      	mov	r1, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	400a      	ands	r2, r1
 8000692:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;//setting
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	68d9      	ldr	r1, [r3, #12]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	697a      	ldr	r2, [r7, #20]
 80006a0:	430a      	orrs	r2, r1
 80006a2:	60da      	str	r2, [r3, #12]

		temp = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]

		//4. configure the output type
		temp = (pGPIOHandle->pGPIO_PinConfig->GPIO_PinOPType << (pGPIOHandle->pGPIO_PinConfig->GPIO_PinNumber));
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	791b      	ldrb	r3, [r3, #4]
 80006ae:	461a      	mov	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ba:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x3 << pGPIOHandle->pGPIO_PinConfig->GPIO_PinNumber);//clearing
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	685a      	ldr	r2, [r3, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4619      	mov	r1, r3
 80006ca:	2303      	movs	r3, #3
 80006cc:	408b      	lsls	r3, r1
 80006ce:	43db      	mvns	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	400a      	ands	r2, r1
 80006d8:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;//	setting
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	6859      	ldr	r1, [r3, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	430a      	orrs	r2, r1
 80006e8:	605a      	str	r2, [r3, #4]

		temp = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]

		//5. configure the alternate functionality
		if(pGPIOHandle->pGPIO_PinConfig->GPIO_PinMode == GPIO_MODE_ALTFN)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	785b      	ldrb	r3, [r3, #1]
 80006f4:	2b02      	cmp	r3, #2
 80006f6:	d139      	bne.n	800076c <GPIO_Init+0x328>
		{
			//Configure the alternate function registers
			 if(pGPIOHandle->pGPIO_PinConfig->GPIO_PinNumber){
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d034      	beq.n	800076c <GPIO_Init+0x328>

				 //configure the alt function registers
				 uint8_t temp1, temp2;

				 temp1 = pGPIOHandle->pGPIO_PinConfig->GPIO_PinNumber / 8;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	08db      	lsrs	r3, r3, #3
 800070a:	743b      	strb	r3, [r7, #16]
				 temp2 = pGPIOHandle->pGPIO_PinConfig->GPIO_PinNumber % 8;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	f003 0307 	and.w	r3, r3, #7
 8000716:	73fb      	strb	r3, [r7, #15]
				 pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	7c3a      	ldrb	r2, [r7, #16]
 800071e:	3208      	adds	r2, #8
 8000720:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	220f      	movs	r2, #15
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	43db      	mvns	r3, r3
 8000730:	4618      	mov	r0, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	7c3a      	ldrb	r2, [r7, #16]
 8000738:	4001      	ands	r1, r0
 800073a:	3208      	adds	r2, #8
 800073c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				 pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->pGPIO_PinConfig->GPIO_PinAltFunMode << (4 * temp2));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	7c3a      	ldrb	r2, [r7, #16]
 8000746:	3208      	adds	r2, #8
 8000748:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	795b      	ldrb	r3, [r3, #5]
 8000752:	461a      	mov	r2, r3
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	fa02 f303 	lsl.w	r3, r2, r3
 800075c:	4618      	mov	r0, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	7c3a      	ldrb	r2, [r7, #16]
 8000764:	4301      	orrs	r1, r0
 8000766:	3208      	adds	r2, #8
 8000768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			 }
		}
}
 800076c:	bf00      	nop
 800076e:	3718      	adds	r7, #24
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	40013800 	.word	0x40013800
 800077c:	40013c00 	.word	0x40013c00

08000780 <SPI_PeriClockControl>:
 * @return			-
 *
 * @Note			-
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d120      	bne.n	80007d4 <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a22      	ldr	r2, [pc, #136]	; (8000820 <SPI_PeriClockControl+0xa0>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d106      	bne.n	80007a8 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 800079a:	4b22      	ldr	r3, [pc, #136]	; (8000824 <SPI_PeriClockControl+0xa4>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	4a21      	ldr	r2, [pc, #132]	; (8000824 <SPI_PeriClockControl+0xa4>)
 80007a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007a4:	6453      	str	r3, [r2, #68]	; 0x44
		{
			SPI3_PCLK_DI();
		}

	}
}
 80007a6:	e035      	b.n	8000814 <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI2)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a1f      	ldr	r2, [pc, #124]	; (8000828 <SPI_PeriClockControl+0xa8>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d106      	bne.n	80007be <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <SPI_PeriClockControl+0xa4>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	4a1b      	ldr	r2, [pc, #108]	; (8000824 <SPI_PeriClockControl+0xa4>)
 80007b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ba:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007bc:	e02a      	b.n	8000814 <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI3)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4a1a      	ldr	r2, [pc, #104]	; (800082c <SPI_PeriClockControl+0xac>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d126      	bne.n	8000814 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <SPI_PeriClockControl+0xa4>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	4a16      	ldr	r2, [pc, #88]	; (8000824 <SPI_PeriClockControl+0xa4>)
 80007cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007d0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007d2:	e01f      	b.n	8000814 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a12      	ldr	r2, [pc, #72]	; (8000820 <SPI_PeriClockControl+0xa0>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d106      	bne.n	80007ea <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <SPI_PeriClockControl+0xa4>)
 80007de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e0:	4a10      	ldr	r2, [pc, #64]	; (8000824 <SPI_PeriClockControl+0xa4>)
 80007e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007e6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80007e8:	e014      	b.n	8000814 <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI2)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <SPI_PeriClockControl+0xa8>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d106      	bne.n	8000800 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <SPI_PeriClockControl+0xa4>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	4a0b      	ldr	r2, [pc, #44]	; (8000824 <SPI_PeriClockControl+0xa4>)
 80007f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80007fc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007fe:	e009      	b.n	8000814 <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI3)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <SPI_PeriClockControl+0xac>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d105      	bne.n	8000814 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <SPI_PeriClockControl+0xa4>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	4a05      	ldr	r2, [pc, #20]	; (8000824 <SPI_PeriClockControl+0xa4>)
 800080e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000812:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	40013000 	.word	0x40013000
 8000824:	40023800 	.word	0x40023800
 8000828:	40003800 	.word	0x40003800
 800082c:	40003c00 	.word	0x40003c00

08000830 <SPI_Init>:
 * @return			-
 *
 * @Note			-
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]

	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2101      	movs	r1, #1
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff9c 	bl	8000780 <SPI_PeriClockControl>

	//.configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	791b      	ldrb	r3, [r3, #4]
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	461a      	mov	r2, r3
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	4313      	orrs	r3, r2
 8000854:	60fb      	str	r3, [r7, #12]

	//2.Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	795b      	ldrb	r3, [r3, #5]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d104      	bne.n	8000868 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	e010      	b.n	800088a <SPI_Init+0x5a>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	795b      	ldrb	r3, [r3, #5]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d104      	bne.n	800087a <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	e007      	b.n	800088a <SPI_Init+0x5a>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	795b      	ldrb	r3, [r3, #5]
 800087e:	2b03      	cmp	r3, #3
 8000880:	d103      	bne.n	800088a <SPI_Init+0x5a>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000888:	60fb      	str	r3, [r7, #12]
		//Rx only bit must be set
	}

	//3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	799b      	ldrb	r3, [r3, #6]
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	461a      	mov	r2, r3
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	4313      	orrs	r3, r2
 8000896:	60fb      	str	r3, [r7, #12]

	//4. Configure the DFF
			tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	79db      	ldrb	r3, [r3, #7]
 800089c:	02db      	lsls	r3, r3, #11
 800089e:	461a      	mov	r2, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	4313      	orrs	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
	//5. configure the CPOL
			tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	7a1b      	ldrb	r3, [r3, #8]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	461a      	mov	r2, r3
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	60fb      	str	r3, [r7, #12]
	//6. configure the CPHA
			tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	7a5b      	ldrb	r3, [r3, #9]
 80008b8:	461a      	mov	r2, r3
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	4313      	orrs	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->SPI_CR1 = tempreg;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	68fa      	ldr	r2, [r7, #12]
 80008c6:	601a      	str	r2, [r3, #0]
}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <SPI_GetFlagStatus>:
{

}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FLAGNAME)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
	if(pSPIx->SPI_SR & FLAGNAME){
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	689a      	ldr	r2, [r3, #8]
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	4013      	ands	r3, r2
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e000      	b.n	80008ec <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80008ea:	2300      	movs	r3, #0
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <SPI_SendData>:
 * @return			-
 *
 * @Note			-
 */
void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer, uint32_t Len)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	while(Len>0){
 8000904:	e024      	b.n	8000950 <SPI_SendData+0x58>

		//1. Wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG) == FLAG_RESET);
 8000906:	bf00      	nop
 8000908:	2102      	movs	r1, #2
 800090a:	68f8      	ldr	r0, [r7, #12]
 800090c:	f7ff ffe0 	bl	80008d0 <SPI_GetFlagStatus>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d0f8      	beq.n	8000908 <SPI_SendData+0x10>

		//2. check the DFF bit in CR1
		if((pSPIx->SPI_CR1) & (1 << SPI_CR1_DFF))
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800091e:	2b00      	cmp	r3, #0
 8000920:	d00e      	beq.n	8000940 <SPI_SendData+0x48>
		{
			//16 bit DFF
			//1.load the data in to the DR
			pSPIx->SPI_DR = *((uint16_t*) pTxBuffer);
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	461a      	mov	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	60da      	str	r2, [r3, #12]
			Len--;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3b01      	subs	r3, #1
 8000930:	607b      	str	r3, [r7, #4]
			Len--;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3b01      	subs	r3, #1
 8000936:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	3301      	adds	r3, #1
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	e007      	b.n	8000950 <SPI_SendData+0x58>
		}
		else
		{
			//8 bit DFF
			pSPIx->SPI_DR = *( pTxBuffer);
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	60da      	str	r2, [r3, #12]
						Len--;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3b01      	subs	r3, #1
 800094e:	607b      	str	r3, [r7, #4]
	while(Len>0){
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1d7      	bne.n	8000906 <SPI_SendData+0xe>

		}
	}
}
 8000956:	bf00      	nop
 8000958:	bf00      	nop
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <SPI_PeripheralControl>:
 * @return			-
 *
 * @Note			-
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	460b      	mov	r3, r1
 800096a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800096c:	78fb      	ldrb	r3, [r7, #3]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d106      	bne.n	8000980 <SPI_PeripheralControl+0x20>
	{
		pSPIx->SPI_CR1 |= (1 << SPI_CR1_SPE);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->SPI_CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 800097e:	e005      	b.n	800098c <SPI_PeripheralControl+0x2c>
		pSPIx->SPI_CR1 &= ~(1 << SPI_CR1_SPE);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	601a      	str	r2, [r3, #0]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <__libc_init_array>:
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	4d0d      	ldr	r5, [pc, #52]	; (80009d0 <__libc_init_array+0x38>)
 800099c:	4c0d      	ldr	r4, [pc, #52]	; (80009d4 <__libc_init_array+0x3c>)
 800099e:	1b64      	subs	r4, r4, r5
 80009a0:	10a4      	asrs	r4, r4, #2
 80009a2:	2600      	movs	r6, #0
 80009a4:	42a6      	cmp	r6, r4
 80009a6:	d109      	bne.n	80009bc <__libc_init_array+0x24>
 80009a8:	4d0b      	ldr	r5, [pc, #44]	; (80009d8 <__libc_init_array+0x40>)
 80009aa:	4c0c      	ldr	r4, [pc, #48]	; (80009dc <__libc_init_array+0x44>)
 80009ac:	f000 f818 	bl	80009e0 <_init>
 80009b0:	1b64      	subs	r4, r4, r5
 80009b2:	10a4      	asrs	r4, r4, #2
 80009b4:	2600      	movs	r6, #0
 80009b6:	42a6      	cmp	r6, r4
 80009b8:	d105      	bne.n	80009c6 <__libc_init_array+0x2e>
 80009ba:	bd70      	pop	{r4, r5, r6, pc}
 80009bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80009c0:	4798      	blx	r3
 80009c2:	3601      	adds	r6, #1
 80009c4:	e7ee      	b.n	80009a4 <__libc_init_array+0xc>
 80009c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ca:	4798      	blx	r3
 80009cc:	3601      	adds	r6, #1
 80009ce:	e7f2      	b.n	80009b6 <__libc_init_array+0x1e>
 80009d0:	08000a04 	.word	0x08000a04
 80009d4:	08000a04 	.word	0x08000a04
 80009d8:	08000a04 	.word	0x08000a04
 80009dc:	08000a08 	.word	0x08000a08

080009e0 <_init>:
 80009e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e2:	bf00      	nop
 80009e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009e6:	bc08      	pop	{r3}
 80009e8:	469e      	mov	lr, r3
 80009ea:	4770      	bx	lr

080009ec <_fini>:
 80009ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ee:	bf00      	nop
 80009f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009f2:	bc08      	pop	{r3}
 80009f4:	469e      	mov	lr, r3
 80009f6:	4770      	bx	lr
